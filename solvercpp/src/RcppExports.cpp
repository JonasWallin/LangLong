// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// traceWithLUSparse
double traceWithLUSparse(Eigen::MatrixXd A, Eigen::SparseMatrix<double,0,int> B);
RcppExport SEXP solvercpp_traceWithLUSparse(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double,0,int> >::type B(BSEXP);
    __result = Rcpp::wrap(traceWithLUSparse(A, B));
    return __result;
END_RCPP
}
// traceWithLU
double traceWithLU(Eigen::MatrixXd A, Eigen::MatrixXd B);
RcppExport SEXP solvercpp_traceWithLU(SEXP ASEXP, SEXP BSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type B(BSEXP);
    __result = Rcpp::wrap(traceWithLU(A, B));
    return __result;
END_RCPP
}
// solveWithLU
Eigen::VectorXd solveWithLU(Eigen::MatrixXd A, Eigen::VectorXd b);
RcppExport SEXP solvercpp_solveWithLU(SEXP ASEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type b(bSEXP);
    __result = Rcpp::wrap(solveWithLU(A, b));
    return __result;
END_RCPP
}
// logdetWithLU
double logdetWithLU(Eigen::MatrixXd A);
RcppExport SEXP solvercpp_logdetWithLU(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    __result = Rcpp::wrap(logdetWithLU(A));
    return __result;
END_RCPP
}
// LU_sparse_logdet
double LU_sparse_logdet(Eigen::SparseMatrix<double,0,int> A);
RcppExport SEXP solvercpp_LU_sparse_logdet(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Eigen::SparseMatrix<double,0,int> >::type A(ASEXP);
    __result = Rcpp::wrap(LU_sparse_logdet(A));
    return __result;
END_RCPP
}
// LU_sparse_tests
List LU_sparse_tests(List init_list_in);
RcppExport SEXP solvercpp_LU_sparse_tests(SEXP init_list_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type init_list_in(init_list_inSEXP);
    __result = Rcpp::wrap(LU_sparse_tests(init_list_in));
    return __result;
END_RCPP
}
// solver_tests
List solver_tests(List init_list_in);
RcppExport SEXP solvercpp_solver_tests(SEXP init_list_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type init_list_in(init_list_inSEXP);
    __result = Rcpp::wrap(solver_tests(init_list_in));
    return __result;
END_RCPP
}
// kronecker_tests
List kronecker_tests(List init_list_in);
RcppExport SEXP solvercpp_kronecker_tests(SEXP init_list_inSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type init_list_in(init_list_inSEXP);
    __result = Rcpp::wrap(kronecker_tests(init_list_in));
    return __result;
END_RCPP
}
// vech_cpp
Eigen::VectorXd vech_cpp(Eigen::MatrixXd A);
RcppExport SEXP solvercpp_vech_cpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    __result = Rcpp::wrap(vech_cpp(A));
    return __result;
END_RCPP
}
// veci_cpp
Eigen::MatrixXd veci_cpp(Eigen::VectorXd vecA, int n);
RcppExport SEXP solvercpp_veci_cpp(SEXP vecASEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type vecA(vecASEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    __result = Rcpp::wrap(veci_cpp(vecA, n));
    return __result;
END_RCPP
}
// vec_cpp
Eigen::VectorXd vec_cpp(Eigen::MatrixXd A);
RcppExport SEXP solvercpp_vec_cpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    __result = Rcpp::wrap(vec_cpp(A));
    return __result;
END_RCPP
}
// duplicatematrix_cpp
Eigen::MatrixXi duplicatematrix_cpp(Eigen::MatrixXd A);
RcppExport SEXP solvercpp_duplicatematrix_cpp(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type A(ASEXP);
    __result = Rcpp::wrap(duplicatematrix_cpp(A));
    return __result;
END_RCPP
}
