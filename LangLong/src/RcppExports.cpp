// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// estimateLong_cpp
List estimateLong_cpp(List obs_list, List operator_list, List theta_list, double stepsize, int Niter, int nsim, int silent);
RcppExport SEXP LANGlong_estimateLong_cpp(SEXP obs_listSEXP, SEXP operator_listSEXP, SEXP theta_listSEXP, SEXP stepsizeSEXP, SEXP NiterSEXP, SEXP nsimSEXP, SEXP silentSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type obs_list(obs_listSEXP);
    Rcpp::traits::input_parameter< List >::type operator_list(operator_listSEXP);
    Rcpp::traits::input_parameter< List >::type theta_list(theta_listSEXP);
    Rcpp::traits::input_parameter< double >::type stepsize(stepsizeSEXP);
    Rcpp::traits::input_parameter< int >::type Niter(NiterSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< int >::type silent(silentSEXP);
    __result = Rcpp::wrap(estimateLong_cpp(obs_list, operator_list, theta_list, stepsize, Niter, nsim, silent));
    return __result;
END_RCPP
}
// estimateLongGH_cpp
List estimateLongGH_cpp(List obs_list, List operator_list, List theta_list, List mixed_list, double stepsize, int Niter, int nsim, int burnin, int noise, int commonsigma, int silent, List V_list, Eigen::VectorXd U, int Nlong);
RcppExport SEXP LANGlong_estimateLongGH_cpp(SEXP obs_listSEXP, SEXP operator_listSEXP, SEXP theta_listSEXP, SEXP mixed_listSEXP, SEXP stepsizeSEXP, SEXP NiterSEXP, SEXP nsimSEXP, SEXP burninSEXP, SEXP noiseSEXP, SEXP commonsigmaSEXP, SEXP silentSEXP, SEXP V_listSEXP, SEXP USEXP, SEXP NlongSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type obs_list(obs_listSEXP);
    Rcpp::traits::input_parameter< List >::type operator_list(operator_listSEXP);
    Rcpp::traits::input_parameter< List >::type theta_list(theta_listSEXP);
    Rcpp::traits::input_parameter< List >::type mixed_list(mixed_listSEXP);
    Rcpp::traits::input_parameter< double >::type stepsize(stepsizeSEXP);
    Rcpp::traits::input_parameter< int >::type Niter(NiterSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< int >::type commonsigma(commonsigmaSEXP);
    Rcpp::traits::input_parameter< int >::type silent(silentSEXP);
    Rcpp::traits::input_parameter< List >::type V_list(V_listSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type U(USEXP);
    Rcpp::traits::input_parameter< int >::type Nlong(NlongSEXP);
    __result = Rcpp::wrap(estimateLongGH_cpp(obs_list, operator_list, theta_list, mixed_list, stepsize, Niter, nsim, burnin, noise, commonsigma, silent, V_list, U, Nlong));
    return __result;
END_RCPP
}
// samplePosteriorGH
List samplePosteriorGH(List obs_list, List operator_list, List theta_list, List mixed_list, List V_list, int nsim, int noise, int commonsigma);
RcppExport SEXP LANGlong_samplePosteriorGH(SEXP obs_listSEXP, SEXP operator_listSEXP, SEXP theta_listSEXP, SEXP mixed_listSEXP, SEXP V_listSEXP, SEXP nsimSEXP, SEXP noiseSEXP, SEXP commonsigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type obs_list(obs_listSEXP);
    Rcpp::traits::input_parameter< List >::type operator_list(operator_listSEXP);
    Rcpp::traits::input_parameter< List >::type theta_list(theta_listSEXP);
    Rcpp::traits::input_parameter< List >::type mixed_list(mixed_listSEXP);
    Rcpp::traits::input_parameter< List >::type V_list(V_listSEXP);
    Rcpp::traits::input_parameter< int >::type nsim(nsimSEXP);
    Rcpp::traits::input_parameter< int >::type noise(noiseSEXP);
    Rcpp::traits::input_parameter< int >::type commonsigma(commonsigmaSEXP);
    __result = Rcpp::wrap(samplePosteriorGH(obs_list, operator_list, theta_list, mixed_list, V_list, nsim, noise, commonsigma));
    return __result;
END_RCPP
}
// simulateLong_cpp
List simulateLong_cpp(List obs_, List operator_, List theta_);
RcppExport SEXP LANGlong_simulateLong_cpp(SEXP obs_SEXP, SEXP operator_SEXP, SEXP theta_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type obs_(obs_SEXP);
    Rcpp::traits::input_parameter< List >::type operator_(operator_SEXP);
    Rcpp::traits::input_parameter< List >::type theta_(theta_SEXP);
    __result = Rcpp::wrap(simulateLong_cpp(obs_, operator_, theta_));
    return __result;
END_RCPP
}
// testSimulateX_cpp
List testSimulateX_cpp(List operator_, List theta_);
RcppExport SEXP LANGlong_testSimulateX_cpp(SEXP operator_SEXP, SEXP theta_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type operator_(operator_SEXP);
    Rcpp::traits::input_parameter< List >::type theta_(theta_SEXP);
    __result = Rcpp::wrap(testSimulateX_cpp(operator_, theta_));
    return __result;
END_RCPP
}
// testSimulateX2_cpp
List testSimulateX2_cpp(List operator_, List theta_);
RcppExport SEXP LANGlong_testSimulateX2_cpp(SEXP operator_SEXP, SEXP theta_SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type operator_(operator_SEXP);
    Rcpp::traits::input_parameter< List >::type theta_(theta_SEXP);
    __result = Rcpp::wrap(testSimulateX2_cpp(operator_, theta_));
    return __result;
END_RCPP
}
// simulateLongGH_cpp
List simulateLongGH_cpp(List obs_list, List operator_list, List theta_list);
RcppExport SEXP LANGlong_simulateLongGH_cpp(SEXP obs_listSEXP, SEXP operator_listSEXP, SEXP theta_listSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< List >::type obs_list(obs_listSEXP);
    Rcpp::traits::input_parameter< List >::type operator_list(operator_listSEXP);
    Rcpp::traits::input_parameter< List >::type theta_list(theta_listSEXP);
    __result = Rcpp::wrap(simulateLongGH_cpp(obs_list, operator_list, theta_list));
    return __result;
END_RCPP
}
